//this source code was auto-generated by tolua#, do not modify it
using System;
using LaoHan.Infrastruture.ulua;

public class LaoHan_Infrastruture_lhSceneManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LaoHan.Infrastruture.lhSceneManager), typeof(System.Object));
		L.RegFunction("GetInstance", GetInstance);
		L.RegFunction("Load", Load);
		L.RegFunction("Unload", Unload);
		L.RegFunction("__tostring", Lua_ToString);
		L.RegVar("currentLevel", get_currentLevel, null);
		L.RegVar("currentSceneName", get_currentSceneName, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetInstance(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			LaoHan.Infrastruture.lhSceneManager o = LaoHan.Infrastruture.lhSceneManager.GetInstance();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Load(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			string arg0 = ToLua.CheckString(L, 1);
			System.Action<float> arg1 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (System.Action<float>)ToLua.CheckObject(L, 2, typeof(System.Action<float>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg1 = DelegateFactory.CreateDelegate(typeof(System.Action<float>), func) as System.Action<float>;
			}

			System.Action arg2 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg2 = (System.Action)ToLua.CheckObject(L, 3, typeof(System.Action));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg2 = DelegateFactory.CreateDelegate(typeof(System.Action), func) as System.Action;
			}

			UnityEngine.SceneManagement.LoadSceneMode arg3 = (UnityEngine.SceneManagement.LoadSceneMode)ToLua.CheckObject(L, 4, typeof(UnityEngine.SceneManagement.LoadSceneMode));
			LaoHan.Infrastruture.lhSceneManager.Load(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Unload(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = LaoHan.Infrastruture.lhSceneManager.Unload();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_currentLevel(IntPtr L)
	{
		LuaDLL.lua_pushstring(L, LaoHan.Infrastruture.lhSceneManager.currentLevel);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_currentSceneName(IntPtr L)
	{
		LuaDLL.lua_pushstring(L, LaoHan.Infrastruture.lhSceneManager.currentSceneName);
		return 1;
	}
}

